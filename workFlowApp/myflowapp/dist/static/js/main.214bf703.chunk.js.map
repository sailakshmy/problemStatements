{"version":3,"sources":["components/layout/SignedInLinks.js","store/actions/authActions.js","components/layout/SignedOutLinks.js","components/layout/Navbar.js","components/workflow/WorkflowSummary.js","components/workflow/WorkflowList.js","components/dashboard/Dashboard.js","components/nodes/NodeSummary.js","components/nodes/NodeList.js","components/workflow/WorkflowDetails.js","components/authentication/SignIn.js","components/authentication/SignUp.js","components/workflow/CreateWorkflow.js","store/actions/workflowActions.js","components/nodes/CreateNode.js","store/actions/nodeActions.js","components/nodes/NodeDetails.js","App.js","serviceWorker.js","store/reducers/authReducer.js","store/reducers/workflowReducer.js","store/reducers/nodeReducer.js","store/reducers/rootReducer.js","config/fbConfig.js","index.js"],"names":["connect","dispatch","signOut","getState","getFirebase","auth","then","type","props","className","onClick","SignedOutLinks","to","state","firebase","profile","console","log","uid","links","isLoaded","WorkflowSummary","workflow","workflowTitle","WorkflowList","workflows","map","key","id","Dashboard","this","htmlFor","placeholder","href","data-target","Component","compose","firestore","ordered","firestoreConnect","collection","NodeSummary","node","nodeTitle","nodeDetails","NodeList","nodes","WorkflowDetails","handleChange","e","setState","target","value","match","params","onChange","ownProps","data","SignIn","email","password","handleSubmit","preventDefault","signIn","authError","onSubmit","creds","credentials","signInWithEmailAndPassword","catch","SignUp","firstName","lastName","signUp","newUser","getFirestore","createUserWithEmailAndPassword","resp","doc","user","set","CreateWorkflow","workflowStatus","createWorkflow","history","push","add","authorFirstName","authorLastName","CreateNode","nodeStatus","createNode","NodeDetails","App","exact","path","component","Boolean","window","location","hostname","initState","authReducer","action","message","workflowReducer","err","nodeReducer","rootReducer","combineReducers","firestoreReducer","firebaseReducer","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","initializeApp","settings","store","createStore","applyMiddleware","thunk","withExtraArgument","reduxFirestore","firebaseStateName","rrfProps","config","userProfile","useFirestoreForProfile","createFirestoreInstance","AuthIsLoaded","children","useSelector","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.214bf703.chunk.js","sourcesContent":["import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {signOut} from '../../store/actions/authActions';\r\n\r\n\r\n\r\nconst SignedInLinks = (props) =>{\r\n    \r\n    return(\r\n        <ul className=\"right\">\r\n            <li><a onClick={props.signOut} className='btn white black-text'>Log Out</a></li>\r\n        </ul>\r\n    )\r\n\r\n}\r\n\r\nconst mapDispatchToProps=(dispatch)=>{\r\n    return{\r\n        signOut: ()=>dispatch(signOut())\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(SignedInLinks);","export const signIn = (credentials)=>{\r\n    return (dispatch, getState, {getFirebase})=>{\r\n        //Initialize the firebase \r\n        const firebase = getFirebase();\r\n        //Sign the user in using firebase authentication service\r\n        firebase.auth().signInWithEmailAndPassword(credentials.email,credentials.password)\r\n        //Since this is an async call, using Promises\r\n        .then(()=>{\r\n            dispatch({type:'LOGIN_SUCCESS'})\r\n        })\r\n        .catch((e)=>{\r\n            dispatch({type:'LOGIN_ERROR',e})\r\n        })\r\n    }\r\n}\r\n\r\nexport const signOut=()=>{\r\n    return(dispatch, getState,{getFirebase})=>{\r\n        const firebase  = getFirebase();\r\n        firebase.auth().signOut()\r\n        //Async code\r\n        .then(()=>{\r\n            dispatch({type:'LOGOUT_SUCCESS'})\r\n        });\r\n\r\n    }\r\n}\r\n\r\nexport const signUp=(newUser)=>{\r\n    return(dispatch,getState,{getFirebase, getFirestore})=>{\r\n        const firebase = getFirebase();\r\n        const firestore= getFirestore();\r\n\r\n        firebase.auth().createUserWithEmailAndPassword(\r\n            newUser.email,\r\n            newUser.password\r\n        ).then((resp)=>{\r\n            return firestore.collection('users').doc(resp.user.uid).set({\r\n                firstName: newUser.firstName,\r\n                lastName: newUser.lastName\r\n            })\r\n        }).then(()=> dispatch({type:'SIGNUP_SUCCESS'}))\r\n        .catch((e)=> dispatch({type:\"SIGNUP_ERROR\",e}));\r\n    }\r\n}","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nconst SignedOutLinks = () =>{\r\n    return(\r\n        <ul className=\"right\">\r\n            <li><NavLink to='/signup' className='btn white black-text'>Sign up</NavLink></li>\r\n            <li><NavLink to='/signin' className='btn white black-text'>Log In</NavLink></li>\r\n        </ul>\r\n    )\r\n\r\n}\r\n\r\nexport default SignedOutLinks;","import React  from 'react';\r\nimport SignedInLinks from './SignedInLinks';\r\nimport SignedOutLinks from './SignedOutLinks';\r\nimport {Link} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\n\r\nconst Navbar = (props) =>{\r\n        const {auth,profile} = props;\r\n        console.log(auth.uid);\r\n        //To check if the user is signed in or not and then display only the corresponding links\r\n        //To access the user details whenever needed\r\n        const links = auth.uid ? <SignedInLinks profile={profile}/> : <SignedOutLinks/>\r\n    return(\r\n        <nav className=\"nav-wrapper pink darken-4\">\r\n            <div className=\"left\">\r\n                <Link to='/' className='brand-logo'>\r\n                    <i className='fas fa-sitemap small prefix'></i>\r\n                    FLOWAPP\r\n                </Link>\r\n            </div>\r\n            {auth.isLoaded && links}\r\n                \r\n                \r\n        </nav>\r\n        \r\n    )\r\n}\r\nconst mapStateToProps=(state)=>{\r\n    //console.log(state);\r\n    return{\r\n        auth: state.firebase.auth,\r\n        profile: state.firebase.profile\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Navbar);","import React from 'react';\r\n\r\n\r\nconst WorkflowSummary = ({workflow}) =>{\r\n    return (\r\n        <div>\r\n            <div className=\"card\">\r\n                <div className=\"card-content\">\r\n                    <i className=\"material-icons right\">delete</i>\r\n                    <span></span>\r\n                    <p className=\"card-title\">{workflow.workflowTitle}</p>   \r\n                </div>\r\n                <div className=\"divider\"></div>\r\n                <div className=\"card-content input-field\">\r\n                    <i className=\"material-icons right grey circle\">done</i>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default WorkflowSummary;","import React from 'react';\r\nimport WorkflowSummary from './WorkflowSummary';\r\n//To route the user to a particular workflow and its nodes on click of the workflow  \r\nimport {Link} from 'react-router-dom';\r\n\r\n\r\nconst WorkflowList = ({workflows}) =>{\r\n    return(\r\n        <div className=\"row\">\r\n            {workflows && workflows.map(\r\n                workflow =>{\r\n                    return(\r\n                        <div className=\"col s4\" key={workflow.id}>\r\n                            <Link to={'/workflow/'+ workflow.id}>\r\n                            <WorkflowSummary workflow={workflow} />\r\n                            </Link>\r\n                        </div>\r\n                    )\r\n\r\n            }\r\n            )}\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default WorkflowList;","import React, {Component} from 'react';\r\nimport WorkflowList from '../workflow/WorkflowList';\r\n//To Redirect the user if not signed in\r\nimport {Link,Redirect} from 'react-router-dom';\r\n//Connect the component to redux store\r\nimport {connect} from 'react-redux';\r\n/*To explicitly tell Firestore as to which component is active and which collection is being updated.\r\n This component is where the updated workflows in the Db should be displayed */\r\nimport {firestoreConnect} from 'react-redux-firebase';\r\n//To use more than 1 higher order components and chain them together\r\nimport {compose} from 'redux';\r\n\r\n\r\nclass Dashboard extends Component{\r\n    render(){\r\n        console.log(this.props);\r\n        const {workflows, auth} = this.props;\r\n        if(!auth.uid)//To redirect the user to login page if not logged in\r\n            return <Redirect to='/signin'/>\r\n        return(\r\n            <div>\r\n            <div className=\"divider\"></div>\r\n                <div className=\"section\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col s3\">\r\n                            <div className=\"row\" id='topbarsearch'>\r\n                                <div className=\"input-field col s12\">\r\n                                    <label htmlFor='searchBar'></label>\r\n                                    <i className=\"material-icons prefix\">search</i>\r\n                                    <input type=\"text\" placeholder='Search Workflows' id='searchBar'/>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col s3\">\r\n                            <div className=\"row\" id='filterbutton'>\r\n                                <div className=\"input-field col s12\">\r\n                                    <label htmlFor='filterbutton'></label>\r\n                                    <a href='#' className=\"btn btn-large white black-text dropdown-trigger\"\r\n                                    data-target='dropdown1' id='filterbutton'>\r\n                                        <i className=\"material-icons left\">filter_list</i>\r\n                                    Filter</a>\r\n                                    <ul className=\"dropdown-content\" id='dropdown1'>\r\n                                        <li><a href=\"#\">All</a></li>\r\n                                        <li><a href='#'>Completed</a></li>\r\n                                        <li><a href='#'>Pending</a></li>\r\n                                    </ul>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col s3 right\">\r\n                            <div className=\"row\" id='createWorkflowButton'>\r\n                                <div className=\"input-field col s12\">\r\n                                    <label htmlFor='createWorkflowButton'></label>\r\n                                    <Link to='/createworkflow'className=\"btn btn-large green darken-4 accent-4\" id='createWorkflowButton'>\r\n                                        <i className=\"material-icons left\">add</i>\r\n                                    Create Workflow</Link>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            <div className=\"divider darken-4\"></div>\r\n            <div className=\"dashboard\">\r\n                <div className=\"row\">                    \r\n                    <WorkflowList workflows={workflows}/>\r\n                </div>\r\n            </div>\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n//This is done to reflect the state of the redux store on the UI rather than using hardcoded data\r\nconst mapStateToProps=(state)=>{\r\n   console.log(state);\r\n    return{\r\n        workflows: state.firestore.ordered.workflows,/*state.workflow.workflows- this is the dummy data that was hardcoded. To display\r\n        the data that is available in the DB, access the redux's state.firestore.ordered.workflows*/\r\n        auth: state.firebase.auth\r\n    }\r\n}\r\n\r\nexport default compose(\r\nconnect(mapStateToProps),\r\nfirestoreConnect([\r\n    {collection:'workflows'}\r\n])\r\n)(Dashboard);\r\n","import React from 'react';\r\n\r\n\r\nconst NodeSummary = ({node}) =>{\r\n        return(\r\n            <div className=\"card\">\r\n                <div className=\"divider\"></div>\r\n                     <div className=\"card-content input-field\">\r\n                        <i className=\"material-icons right grey circle done\">done</i>\r\n                    </div>\r\n                    <div className=\"card-content container\">\r\n                        <p className=\"card-title\">{node.nodeTitle}</p>\r\n                    </div>\r\n                    <div className=\"divider\"></div>\r\n                    <div className=\"card-content input-field\">\r\n                        <p className=\"card-content\">{node.nodeDetails}</p>\r\n                    </div>                \r\n            </div>\r\n    )\r\n}\r\n\r\n\r\nexport default NodeSummary;","import React  from 'react';\r\nimport NodeSummary from './NodeSummary';\r\nimport {Link} from 'react-router-dom';\r\n\r\n\r\n\r\nconst NodeList = ({nodes}) => {\r\n    return(\r\n        <div className='row'>\r\n            {nodes && nodes.map(\r\n                node=>{\r\n                    return(\r\n                        <div className=\"col s4\" key={node.id}>\r\n                            <Link to={'/node/'+node.id}>\r\n                            <NodeSummary node={node} key={node.id}/>\r\n                            </Link>\r\n                         </div>\r\n                    )\r\n\r\n                }\r\n            )}            \r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default NodeList;","import React,{Component} from 'react';\r\nimport NodeList from '../nodes/NodeList';\r\n//Connect the component to redux store\r\nimport {connect} from 'react-redux';\r\nimport {Link} from 'react-router-dom';\r\n/**To explicitly inform Firebase as to which component is active. This component is where the updated Nodes\r\n * in the DB should be displayed. */\r\nimport {firestoreConnect} from 'react-redux-firebase';\r\n//To use more than 1 higher order components and chain them together\r\nimport {compose} from 'redux';\r\n\r\nclass WorkflowDetails extends Component{\r\n    handleChange=(e)=>{\r\n        this.setState({\r\n            [e.target.id]: e.target.value\r\n        })\r\n       \r\n    }\r\n    render(){\r\n        console.log(this.props);\r\n        const{nodes, workflow} = this.props;\r\n        console.log(workflow);\r\n        const id = this.props.match.params.id;\r\n        if(workflow){\r\n            return(\r\n            <div>\r\n                <div className=\"divider\"></div>\r\n                    <div className=\"section\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col s3\">\r\n                                <div className=\"row\">\r\n                                    <div className=\"input-field col s12\">\r\n                                        <label htmlFor='searchBar'></label>\r\n                                        <input type=\"text\" id='searchBar' value={workflow.workflowTitle} onChange={this.handleChange}/>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            \r\n                            <div className=\"col s2 right\">\r\n                                <div className=\"row\" id='createWorkflowButton'>\r\n                                    <div className=\"input-field col s12\">\r\n                                        <label htmlFor='save'></label>\r\n                                        <button className=\"btn btn-large blue darken-4 accent-4\" id='createWorkflowButton'>\r\n                                        Save </button>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col s2 right\">\r\n                                <div className=\"row\" id='createWorkflowButton'>\r\n                                    <div className=\"input-field col s12\">\r\n                                        <label htmlFor='createNode'></label>\r\n                                        <Link to='/createnode' className=\"btn btn-large green darken-4 accent-4\" id='createWorkflowButton'>\r\n                                        <i className=\"material-icons left\">add</i>\r\n                                        Add Node</Link>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col s2 right\">\r\n                                <div className=\"row\" id='createWorkflowButton'>\r\n                                    <div className=\"input-field col s12\">\r\n                                        <label htmlFor='shuffleNode'></label>\r\n                                        <button className=\"btn btn-large red darken-4 accent-4\" id='createWorkflowButton'>\r\n                                        <i className=\"material-icons left\">clear</i>\r\n                                        Delete</button>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col s2 right\">\r\n                                <div className=\"row\" id='createWorkflowButton'>\r\n                                    <div className=\"input-field col s12\">\r\n                                        <label htmlFor='shuffleNode'></label>\r\n                                        <button className=\"btn btn-large purple darken-4 accent-4\" id='createWorkflowButton'>\r\n                                        <i className=\"material-icons left\">shuffle</i>\r\n                                        Shuffle </button>\r\n                                    </div>\r\n                                </div>\r\n                            </div>                                                      \r\n                        </div>\r\n                    </div>\r\n                <div className=\"divider\"></div>\r\n                <div className=\"dashboard\">\r\n                    <NodeList nodes={nodes}/>\r\n                </div>\r\n            </div>\r\n            )\r\n        }\r\n        else{\r\n        return(\r\n            <div className=\"container center\">Loading Workflow...</div> \r\n        )\r\n        }\r\n    }\r\n\r\n}\r\n//This is done to reflect the state of the redux store as data on the UI, instead of using Hardcoded data\r\n//ownProps will give access to the props of this component\r\nconst mapStateToProps=(state, ownProps)=>{\r\n    console.log(state);\r\n    const id = ownProps.match.params.id;\r\n    const workflows = state.firestore.data.workflows;\r\n    const workflow = workflows ? workflows[id] : null;\r\n    return{\r\n        nodes: state.firestore.ordered.nodes,//state.node.nodes,\r\n        workflow: workflow\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default compose(\r\n    connect(mapStateToProps),\r\n    firestoreConnect([\r\n        {collection:'workflows'},\r\n        {collection:'nodes'}\r\n    ])\r\n)(WorkflowDetails);","import React, {Component} from 'react';\r\n//To redirect the user to the dashboard if signed in\r\nimport {Link,Redirect} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport {signIn} from '../../store/actions/authActions';\r\n\r\nclass SignIn extends Component{\r\n    state={\r\n        email:'',\r\n        password:''\r\n\r\n    }\r\n    //To handle the submit of the form\r\n    handleSubmit=(e)=>{\r\n        e.preventDefault();\r\n        //console.log(this.state);\r\n        this.props.signIn(this.state);\r\n    }\r\n    //To handle any change in the input fields\r\n    handleChange=(e)=>{\r\n        //console.log(e);\r\n        this.setState({\r\n            [e.target.id]: e.target.value\r\n        })\r\n\r\n    }\r\n    render(){\r\n        const {authError,auth} = this.props;\r\n        if(auth.uid)\r\n            return <Redirect to='/'/>\r\n        return(\r\n            <div className=\"container\">\r\n                <form onSubmit={this.handleSubmit} className=\"white\" >\r\n                    <h5>Login</h5>\r\n                    <div className=\"input-field\">\r\n                        <i className=\"material-icons prefix\">email</i>\r\n                        <label htmlFor=\"email\">Email</label>\r\n                        <input type=\"email\" id='email'  onChange={this.handleChange}/>\r\n                    </div>\r\n                    <div className=\"input-field\">\r\n                    <i className=\"material-icons prefix\">star</i>\r\n                    <label htmlFor=\"password\">Password</label>\r\n                    <input type=\"password\" id='password' onChange={this.handleChange}/>\r\n                    </div>\r\n                    <div className=\"input-field\">\r\n                        <label htmlFor='rememberMe'>\r\n                            <input type='checkbox' id='rememberMe'/>\r\n                            <span>Remember Me</span>                            \r\n                        </label>                     \r\n                    </div>\r\n                    <div className=\"input-field\">\r\n                        <button className=\"btn blue\">Login</button>\r\n                        <div className=\"red-text center\">\r\n                            {authError ? <p>{authError}</p>: null}\r\n\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <Link to='/signup' >Don't have an account? Sign Up here</Link>\r\n                    </div>\r\n\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch)=>{\r\n    return{\r\n        signIn: (creds)=>dispatch(signIn(creds))\r\n    }\r\n}\r\nconst mapStateToProps = (state)=>{\r\n    return{\r\n        authError: state.auth.authError,\r\n        auth: state.firebase.auth\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SignIn);","import React, {Component} from 'react';\r\nimport {Link,Redirect} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport {signUp} from '../../store/actions/authActions';\r\n\r\n\r\n\r\nclass SignUp extends Component {\r\n    state={\r\n        firstName:'',\r\n        lastName:'',\r\n        email:'',\r\n        password:''\r\n\r\n    }\r\n    //To handle the submit of the form\r\n    handleSubmit=(e)=>{\r\n        e.preventDefault();\r\n        console.log(this.state);\r\n        this.props.signUp(this.state);\r\n    }\r\n    //To handle any change in the input fields\r\n    handleChange=(e)=>{\r\n        //console.log(e);\r\n        this.setState({\r\n            [e.target.id]: e.target.value\r\n        })\r\n\r\n    }\r\n    render(){\r\n        const {auth,authError} = this.props;\r\n        if(auth.uid)\r\n            return <Redirect to='/'/>\r\n        return(\r\n            <div className=\"container\">\r\n                <form onSubmit={this.handleSubmit} className=\"white\" >\r\n                    <h5>Sign Up</h5>\r\n                    <div className=\"input-field\">\r\n                        <label htmlFor=\"firstName\">First Name</label>\r\n                        <input type=\"text\" id='firstName'  onChange={this.handleChange}/>\r\n                    </div>\r\n                    <div className=\"input-field\">\r\n                        <label htmlFor=\"lastName\">Last Name</label>\r\n                        <input type=\"text\" id='lastName'  onChange={this.handleChange}/>\r\n                    </div>\r\n                    <div className=\"input-field\">\r\n                        <label htmlFor=\"email\">Email</label>\r\n                        <input type=\"email\" id='email'  onChange={this.handleChange}/>\r\n                    </div>\r\n                    <div className=\"input-field\">\r\n                       <label htmlFor=\"password\">Password</label>\r\n                        <input type=\"password\" id='password' onChange={this.handleChange}/>\r\n                    </div>\r\n                    <div className=\"input-field\">\r\n                        <button className=\"btn blue\">Sign Up</button>\r\n                        <div className=\"red-text center\">\r\n                            {authError ? <p>{authError}</p>: null}\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <Link to='/signin' >Already have an account? Log In here</Link>\r\n                    </div>\r\n\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps=(state)=>{\r\n    return{\r\n        auth: state.firebase.auth,\r\n        authError: state.auth.authError\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) =>{\r\n    return{\r\n        signUp: (newUser)=>dispatch(signUp(newUser))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(SignUp);","import React, {Component} from 'react';\r\n//To connect the component to the Redux store\r\nimport {connect} from 'react-redux';\r\n//Dispatch the Create_workflow action to the Action Creator by using mapDispatchToProps and connect\r\nimport {createWorkflow} from '../../store/actions/workflowActions';\r\n//To Redirect the user if not signed in\r\nimport {Redirect} from 'react-router-dom';\r\n\r\n\r\nclass CreateWorkflow extends Component{\r\n    state={\r\n        workflowTitle:'',\r\n        workflowStatus:'pending'\r\n    }\r\n    handleSubmit=(e)=>{\r\n        e.preventDefault();\r\n        this.props.createWorkflow(this.state);\r\n        //Rerouting the user back to the dashboard\r\n        this.props.history.push('/');\r\n    }\r\n    handleChange=(e)=>{\r\n        this.setState({\r\n            [e.target.id]: e.target.value\r\n        })\r\n    }\r\n\r\n    render(){\r\n        const {auth} = this.props;\r\n        if(!auth.uid)\r\n            return <Redirect to='/signin' />\r\n        return(\r\n        <div className=\"container\">\r\n        <form onSubmit={this.handleSubmit} className=\"white\" >\r\n            <h5>Create Workflow</h5>\r\n            <div className=\"divider\"></div>\r\n            <div className=\"input-field\">\r\n            <label htmlFor='workflowTitle'>Workflow Title</label>\r\n            <input type=\"text\" id='workflowTitle' onChange={this.handleChange}/> \r\n            </div>\r\n            <div className=\"divider\"></div>\r\n            <div className=\"input-field\">\r\n                <button className=\"btn green\" onClick={this.handleSubmit}>Add Workflow</button>\r\n            </div>\r\n        </form>\r\n    </div>\r\n    )\r\n}\r\n\r\n}\r\n\r\nconst mapDispatchToProps=(dispatch)=>{\r\n    //Whatever property is to be added to the props can be added to the return Object\r\n    return{\r\n        /*so when props.createWorkflow is invoked(inside the handleSubmit function), it will run this function, take in that workflow \r\n        and perform a dispatch to the action Creator with the new workflow details*/\r\n        createWorkflow: (workflow)=>dispatch(createWorkflow(workflow))\r\n\r\n    }\r\n}\r\nconst mapStateToProps=(state)=>{\r\n    return{\r\n        auth: state.firebase.auth\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateWorkflow);\r\n","//Using action creator to halt the dispatch action for Async DB calls\r\nexport const createWorkflow = (workflow)=>{\r\n    /*{getFirebase, getFirebase} can be used to interact with the firebase and firestore*/\r\n    return(dispatch, getState,{getFirebase, getFirestore})=>{ \r\n        //make call to DB here\r\n        /*To add data to the firestore, initialise the getFirestore function and store it in a constant,\r\n        so that it gives a reference to the Firestore DB */\r\n        const firestore = getFirestore();\r\n        //get the profile information from the state\r\n        const profile = getState().firebase.profile;\r\n        //Access the workflows Collection inside the firestore DB\r\n        firestore.collection('workflows')\r\n        //Add the new workflow document to the collection\r\n        .add({...workflow,\r\n            /*Since the workflow only has details regarding the workflowStatus and workflowTitle,\r\n            add the details regarding the author */\r\n            authorFirstName:profile.firstName,\r\n            authorLastName:profile.lastName \r\n        })\r\n        /**This is an async call, so using promises */\r\n        .then(()=>{\r\n            dispatch({type:'ADD_WORKFLOW',workflow: workflow})\r\n        })\r\n        .catch((e)=>{\r\n            dispatch({type:'ADD_WORKFLOW_ERROR',e: e})\r\n        })\r\n\r\n        \r\n        \r\n    }\r\n}\r\n\r\nexport const updateWorkflow=(workflow,node)=>{\r\n    \r\n}","import React, {Component} from 'react';\r\n//Connect the component to redux store\r\nimport {connect} from 'react-redux';\r\n//Dispatch the create node action to the actionCreator by using mapDispatchToProps and connect\r\nimport {createNode} from '../../store/actions/nodeActions';\r\n//To Redirect the user if not signed in\r\nimport {Redirect} from 'react-router-dom';\r\n\r\n\r\nclass CreateNode extends Component{\r\n    state={\r\n        nodeTitle:'',\r\n        nodeDetails:'',\r\n        nodeStatus:'pending'\r\n    }\r\n\r\n    handleSubmit=(e)=>{\r\n        e.preventDefault();\r\n        //add the node\r\n       console.log(this.props);\r\n       \r\n        this.props.createNode(this.state);\r\n        //Rerouting the user to the Workflow dashboard\r\n        \r\n\r\n    }\r\n    handleChange=(e)=>{\r\n        this.setState({\r\n            [e.target.id]:e.target.value\r\n        })\r\n    }\r\n\r\n    render(){\r\n        const {auth} = this.props;\r\n        if(!auth.uid)\r\n            return <Redirect to='/signin'/>\r\n        return (\r\n        <div className=\"container\">\r\n        <form onSubmit={this.handleSubmit} className=\"white\" >\r\n            <h5>Create Node</h5>\r\n            <div className=\"divider\"></div>\r\n            <div className=\"input-field\">\r\n            <label htmlFor='nodeTitle'>Node Title</label>\r\n            <input type=\"text\" id='nodeTitle' onChange={this.handleChange}/> \r\n            </div>\r\n            <div className=\"divider\"></div>\r\n             <div className=\"input-field\">\r\n             <label htmlFor='nodeDetails'>Node Details</label>\r\n            <textarea  className=\"materialize-textarea\" id='nodeDetails' onChange={this.handleChange}></textarea>\r\n            </div>\r\n            <div className=\"input-field\">\r\n                <button className=\"btn green\" onClick={this.handleSubmit}> Add Node</button>\r\n            </div>\r\n        </form>\r\n    </div>\r\n    )\r\n}\r\n\r\n}\r\n\r\nconst mapDispatchToProps=(dispatch)=>{\r\n    //Whatever property is to be added to the props can be added to the return object\r\n    return{\r\n        /**So whenever props.createNode is invoked (inside the handleSubmit function), the following function is executed. The newly created\r\n         * node is taken and dispatched to the action creator*/\r\n        createNode:(node)=>dispatch(createNode(node)),\r\n    \r\n    }\r\n}\r\nconst mapStateToProps=(state)=>{\r\n    console.log(state);\r\n    return{\r\n        auth : state.firebase.auth\r\n\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateNode);\r\n","//Using action creator to halt the dispatch action for Async DB calls\r\nexport const createNode = (node)=>{\r\n    /*{getFirebase, getFirebase} can be used to interact with the firebase and firestore*/\r\n    return(dispatch, getState, {getFirebase, getFirestore})=>{\r\n        //make DB call here\r\n        dispatch({type:'ADD_NODE',node})\r\n\r\n    }\r\n};","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {firestoreConnect} from 'react-redux-firebase';\r\nimport {compose} from 'redux';\r\n\r\n\r\nclass NodeDetails extends Component{\r\n    render(){\r\n        const id = this.props.match.params.id;\r\n        console.log(this.props);\r\n        const {node} = this.props;\r\n        if(node){\r\n        return(\r\n            <div>\r\n                <div className=\"divider\"></div>\r\n                <div className=\"container\">\r\n                    <form onSubmit={this.handleSubmit} className=\"white\">\r\n                        <h5>Create Node</h5>\r\n                        <div className=\"card\">\r\n                            <div className=\"divider\"></div>\r\n                            <div className=\"card-content container input-field\">\r\n                                <input type=\"text\" value={node.nodeTitle}/> \r\n                            </div>\r\n                            <div className=\"divider\"></div>\r\n                            <div className=\"card-content input-field\">\r\n                                <textarea  className=\"materialize-textarea\" value={node.nodeDetails}></textarea>\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n                <div className=\"divider\"></div>\r\n            </div>\r\n\r\n        )\r\n        }\r\n        else{\r\n            return(\r\n                <div className=\"container center\">Loading Node.......</div>\r\n            )\r\n        }\r\n    }\r\n}\r\nconst mapStateToProps=(state, ownProps)=>{\r\n    const id = ownProps.match.params.id;\r\n    const nodes = state.firestore.data.nodes;\r\n    const node = nodes ? nodes[id]:null;\r\n    return{\r\n        node:node\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps),\r\n    firestoreConnect([\r\n       // {collection:'nodes'}\r\n    ])\r\n) (NodeDetails);\r\n\r\n","import React,{Component} from 'react';\r\nimport './App.css';\r\nimport {BrowserRouter, Switch, Route} from 'react-router-dom';\r\nimport Navbar from './components/layout/Navbar';\r\nimport Dashboard from './components/dashboard/Dashboard';\r\nimport WorkflowDetails from './components/workflow/WorkflowDetails';\r\nimport SignIn from './components/authentication/SignIn';\r\nimport SignUp from './components/authentication/SignUp';\r\nimport CreateWorkflow from './components/workflow/CreateWorkflow';\r\nimport CreateNode from './components/nodes/CreateNode';\r\nimport NodeDetails from './components/nodes/NodeDetails';\r\n\r\n\r\nclass App extends Component {\r\n  render(){\r\n  return (\r\n    <BrowserRouter>\r\n      <div className=\"App\">\r\n        <Navbar/>\r\n        <Switch>\r\n          <Route exact path='/' component={Dashboard} />\r\n          <Route path='/workflow/:id' component={WorkflowDetails}/>\r\n          <Route path='/signin' component={SignIn}/>\r\n          <Route path='/signup' component={SignUp}/>\r\n          <Route path='/createworkflow' component={CreateWorkflow}/>\r\n          <Route path='/createNode' component={CreateNode}/>\r\n          <Route path='/node/:id' component={NodeDetails}/>\r\n        </Switch>  \r\n      </div>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const initState = {\r\n    authError:''\r\n}\r\n\r\nconst authReducer=(state=initState,action)=>{\r\n    switch(action.type){\r\n        case 'LOGIN_SUCCESS':\r\n            console.log('Login Success');\r\n            return{\r\n                ... state,\r\n                authError: null\r\n            };\r\n        case 'LOGIN_ERROR':\r\n            console.log('Login Error');\r\n            return {\r\n                ...state,\r\n                authError:'Login failed'\r\n            };\r\n        case 'LOGOUT_SUCCESS':\r\n            console.log('SignOut Success');\r\n            return state;\r\n        case 'SIGNUP_SUCCESS':\r\n            console.log('Signup Success');\r\n            return{\r\n                ... state,\r\n                authError: null\r\n            };\r\n        case 'SIGNUP_ERROR':\r\n            console.log('Signup error');\r\n            return{\r\n                ... state,\r\n                authError: action.e.message\r\n            };\r\n        default:\r\n            return state;\r\n\r\n    }\r\n   \r\n}\r\n\r\n\r\nexport default authReducer;","const initState = {\r\n    workflows: [\r\n        {id:'1', workflowTitle: 'Workflow1'},\r\n        {id:'2', workflowTitle: 'Workflow2'},\r\n        {id:'3', workflowTitle: 'Workflow3'}\r\n    ]\r\n}\r\n\r\nconst workflowReducer=(state=initState,action)=>{\r\n    //Identify the type of action coming in using switch\r\n    switch(action.type){\r\n        case 'ADD_WORKFLOW':\r\n            console.log('Added a new workflow',action.workflow);\r\n            return state;\r\n        case 'ADD_WORKFLOW_ERROR':\r\n            console.log('Adding a new workflow resulted in error',action.err);\r\n            return state;\r\n        default:\r\n            return state;\r\n    }\r\n    \r\n}\r\n\r\n\r\nexport default workflowReducer;","const initState = {\r\n    nodes:[\r\n        {id:'1', nodeTitle: 'Node1', nodeDetails:'Content for Node 1',nodeStatus:'pending'},\r\n        {id:'2', nodeTitle: 'Node2', nodeDetails:'Content for Node 2',nodeStatus:'completed'},\r\n        {id:'3', nodeTitle: 'Node3', nodeDetails:'Content for Node 3',nodeStatus:'inprogress'},\r\n\r\n    ]\r\n}\r\n\r\nconst nodeReducer=(state=initState,action)=>{\r\n    //Identify the type of action coming in using a Switch case\r\n    switch(action.type){\r\n        case 'ADD_NODE':\r\n            console.log('Created Node', action.node);\r\n            return state;\r\n        \r\n        case 'DELETE_NODE':\r\n            console.log('Deleted the last node');\r\n            break;\r\n\r\n        case 'SHUFFLE_NODE':\r\n            console.log('Shuffled the nodes');\r\n            break;\r\n        \r\n        default:\r\n            return state;\r\n        \r\n    }\r\n    \r\n}\r\n\r\n\r\nexport default nodeReducer;","import authReducer from './authReducer';\r\nimport workflowReducer from './workflowReducer';\r\nimport nodeReducer from './nodeReducer';\r\nimport {combineReducers} from 'redux';\r\n//To sync the Firetstore data with the redux store data\r\nimport {firestoreReducer} from 'redux-firestore';\r\n//To sync the firebase authentication data\r\nimport {firebaseReducer} from 'react-redux-firebase';\r\n\r\nconst rootReducer = combineReducers({\r\n    auth: authReducer,\r\n    workflow: workflowReducer,\r\n    node: nodeReducer,\r\n    firestore: firestoreReducer,\r\n    firebase: firebaseReducer\r\n});\r\n\r\nexport default rootReducer;","//Importing the core functionalities of firebase\r\nimport firebase from 'firebase/app';\r\n//Importing the firestore Database\r\nimport 'firebase/firestore';\r\n//Importing the firebase authentication to authenticate the application\r\nimport 'firebase/auth';\r\n\r\n\r\n export const firebaseConfig = {\r\n    apiKey: \"AIzaSyDXQQdSggAdAlbOdY-b9resB_hdLtaI1qU\",\r\n    authDomain: \"workflowapp-problemstatement.firebaseapp.com\",\r\n    databaseURL: \"https://workflowapp-problemstatement.firebaseio.com\",\r\n    projectId: \"workflowapp-problemstatement\",\r\n    storageBucket: \"workflowapp-problemstatement.appspot.com\",\r\n    messagingSenderId: \"227696855038\",\r\n    appId: \"1:227696855038:web:15030959aa4d6994b7a2af\"\r\n  };\r\n  //Initializing Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n  //Initializing Firestore\r\n  firebase.firestore().settings({});\r\n  \r\n\r\n  export default firebase;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n//applyMiddleware is imported as it can take a list of middleware and turn them into store enhancers\r\n//compose is used to add multiple store enhancers to a store\r\nimport {createStore, applyMiddleware,compose} from 'redux';\r\nimport rootReducer from './store/reducers/rootReducer';\r\n/**useSelector is imported to render the application to the DOM only after the firebase authentication\r\n *  figurs out if the user is logged in/logged out*/\r\nimport {Provider,useSelector} from 'react-redux';\r\n/*thunk will help to return a function(instead of an object that is usually returned by action creators).\r\nthis function takes 2parameters - dispatch method,getState(to access the state of the store if neeeded) */\r\nimport thunk from 'redux-thunk';\r\n//react-redux-firebase provides binding to firebase service as a whole\r\n/*getFirebase can be used to access the firebase API inside the return function in NodeActions/WorkflowActions\r\nusing the function getExtraArgument on thunk.*/\r\n/**isLoaded is imported to help render the application to the DOM only after the firebase authentication\r\n *  figurs out if the user is logged in/logged out*/\r\nimport {getFirebase,ReactReduxFirebaseProvider,isLoaded} from 'react-redux-firebase';\r\n//redux-firebase provides redux bindings for Firestore DB in particular\r\n/*getFirestore can be used to access the firestoreAPI inside the return function in NodeActions/WorflowActions\r\n using the function getExtraArgument on thunk*/\r\n//reduxFirestore is a store enhancer\r\nimport {reduxFirestore,getFirestore,createFirestoreInstance} from 'redux-firestore';\r\n//firebase and firebaseConfig are imported so that they can passed to the reduxFirestore store enhancer.\r\nimport firebase,{firebaseConfig} from './config/fbConfig';\r\n\r\n\r\n\r\nconst store= createStore(rootReducer,\r\n  compose(\r\n  /** withExtraArgument allows to pass an extra arguemnt(object) in the return function of nodeActions/\r\n   * workflowActions.*/\r\n  applyMiddleware(thunk.withExtraArgument({getFirebase,getFirestore})),\r\n  /**The firebaseConfig and firebase have to be sent as paramters to the reduxFirebase function\r\n   * so that the getFirebase and getFirestore know which project is to be connected. */\r\n  reduxFirestore (firebase,firebaseConfig,{\r\n\r\n    firebaseStateName: 'firebaseReducer'\r\n  })\r\n  ));\r\n\r\n  const rrfConfig={\r\n    //To inform the firebase reducer that the collection to be referred to for user profile is 'users'\r\n    userProfile:'users',\r\n    //To tell the firebase reducer to use firestore to sync profile object on the state in Navbar\r\n    useFirestoreForProfile:true\r\n  }\r\n  const rrfProps = {\r\n    firebase: firebase,\r\n    config: firebaseConfig,\r\n     config : rrfConfig,\r\n    dispatch: store.dispatch,\r\n    createFirestoreInstance,\r\n    userProfile: 'users',//where the profiles are stored in DB\r\n    presence: 'presence',//where the list of online users is stored in the DB\r\n    sessions:'sessions'\r\n  }\r\n  //function to check if the authentication has user details.\r\nfunction AuthIsLoaded({children}){\r\n  const auth = useSelector(state=>state.firebase.auth);\r\n  if(!isLoaded(auth))\r\n    return <div>Loading Screen....</div>\r\n  return children;\r\n}\r\n\r\nReactDOM.render(\r\n   <React.StrictMode>\r\n      <Provider store={store}>\r\n        <ReactReduxFirebaseProvider {...rrfProps}>\r\n          <AuthIsLoaded>\r\n        <App />\r\n        </AuthIsLoaded>\r\n        </ReactReduxFirebaseProvider>\r\n      </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}